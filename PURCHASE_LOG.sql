-- CREATING THE TABLE

CREATE TABLE PURCHASE_LOG(
    ID NUMBER,
    CID VARCHAR2(10),
    PID VARCHAR2(10),
    QUANTITY NUMBER,
    PER_COST NUMBER,
    TOTAL_COST NUMBER,
    TOTAL_COST_W_MEM_DISC NUMBER,
    PURCHASE_DATE DATE,
    CONSTRAINT PK_PURCHASE_LOG PRIMARY KEY(ID),
    CONSTRAINT FK_PLOG__CUSTOMER FOREIGN KEY(CID) REFERENCES CUSTOMER_INFO(ID),
    CONSTRAINT FK_PLOG__PRODUCT FOREIGN KEY(PID) REFERENCES PRODUCT_INFO(ID)
);

-- CREATING THE SEQUENCE

CREATE SEQUENCE SEQ_PURCHASE_LOG
MINVALUE 0
MAXVALUE 999999
START WITH 1
INCREMENT BY 1
CACHE 20;

-- CREATING THE PROCEDURES

-- MAKE_PURCHASE PROCEDURE

CREATE OR REPLACE PROCEDURE MAKE_PURCHASE(IN_CID IN VARCHAR2, IN_PID IN VARCHAR2, QUANTITY IN NUMBER) AS
GEN_ID NUMBER;
TRUE_COST NUMBER;
DISCOUNT NUMBER;
DISCOUNTED_COST NUMBER;
TOTAL_COST NUMBER;
TOTAL_COST_W_MEM_DISC NUMBER;
MEMBERSHIP_STATUS STATUS.STATUS_NAME%TYPE;
MEMBERSHIP_DISCOUNT NUMBER;
SUCCESS BOOLEAN;
CUSTOMER_NAME CUSTOMER_INFO.NAME%TYPE;
PRODUCT_NAME PRODUCT_INFO.P_NAME%TYPE;
BEGIN
    DECREMENT_STOCK(IN_PID, QUANTITY, SUCCESS);
    IF (SUCCESS = TRUE) THEN

        SELECT SEQ_PURCHASE_LOG.NEXTVAL INTO GEN_ID FROM DUAL;
        GET_PRODUCT_COST(IN_PID, TRUE_COST, DISCOUNTED_COST, DISCOUNT);
        TOTAL_COST := DISCOUNTED_COST * QUANTITY;
        GET_STATUS(IN_CID, MEMBERSHIP_STATUS);
        SELECT DISCOUNT INTO MEMBERSHIP_DISCOUNT FROM STATUS WHERE STATUS_NAME = MEMBERSHIP_STATUS;
        TOTAL_COST_W_MEM_DISC := TOTAL_COST - (TOTAL_COST * MEMBERSHIP_DISCOUNT) / 100;

        INSERT INTO PURCHASE_LOG VALUES(GEN_ID, IN_CID, IN_PID, QUANTITY, TRUE_COST, TOTAL_COST, TOTAL_COST_W_MEM_DISC, SYSDATE);

        SELECT NAME INTO CUSTOMER_NAME FROM CUSTOMER_INFO WHERE ID = IN_CID;
        SELECT P_NAME INTO PRODUCT_NAME FROM PRODUCT_INFO WHERE ID = IN_PID;

        INCREMENT_TOTAL_PURCHASE(IN_CID, TOTAL_COST);

        DBMS_OUTPUT.PUT_LINE('--------------------------------------');
        DBMS_OUTPUT.PUT_LINE('-----------------BILL-----------------');
        DBMS_OUTPUT.PUT_LINE('--------------------------------------');
        DBMS_OUTPUT.PUT_LINE('CUSTOMER: ' || CUSTOMER_NAME);
        DBMS_OUTPUT.PUT_LINE('MEMBERSHIP STATUS: ' || MEMBERSHIP_STATUS);
        DBMS_OUTPUT.PUT_LINE('PRODUCT: ' || PRODUCT_NAME);
        DBMS_OUTPUT.PUT_LINE('PER UNIT COST: ' || TRUE_COST);
        DBMS_OUTPUT.PUT_LINE('DISCOUNT: ' || DISCOUNT || ' PERCENT');
        DBMS_OUTPUT.PUT_LINE('PER UNIT DISCOUNTER COST: ' || DISCOUNTED_COST);
        DBMS_OUTPUT.PUT_LINE('QUANTITY: ' || QUANTITY);
        DBMS_OUTPUT.PUT_LINE('TOTAL COST: ' || TOTAL_COST);
        DBMS_OUTPUT.PUT_LINE('MEMBERSHIP DISCOUNT: ' || MEMBERSHIP_DISCOUNT || ' PERCENT');
        DBMS_OUTPUT.PUT_LINE('FINAL COST: ' || TOTAL_COST_W_MEM_DISC);
        DBMS_OUTPUT.PUT_LINE('--------------------------------------');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Not enough product in inventory to make purchase.');
    END IF;
END;
/

-- SEARCH_BY_CUSTOMER PROCEDURE

CREATE OR REPLACE PROCEDURE SEARCH_BY_CUSTOMER(IN_CID IN VARCHAR2) AS
    P_CID CUSTOMER_INFO.ID%TYPE;
    P_PID PRODUCT_INFO.ID%TYPE;
    P_QUANTITY NUMBER;
    P_PER_COST NUMBER;
    P_TOTAL_COST NUMBER;
    P_TOTAL_COST_W_MEM_DISC NUMBER;
    P_PURCHASE_DATE DATE;
    PRODUCT_NAME PRODUCT_INFO.P_NAME%TYPE;
    HEADING VARCHAR2(60);
    TRAILING VARCHAR2(60);
    CURSOR C_PLOG IS SELECT CID, PID, QUANTITY, PER_COST, TOTAL_COST, TOTAL_COST_W_MEM_DISC, PURCHASE_DATE FROM PURCHASE_LOG;
BEGIN
    HEADING := 'PURCHASE HISTORY OF CUSTOMERS WITH ID' || IN_CID;
    TRAILING := LPAD('-', LENGTH(HEADING), '-');
    OPEN C_PLOG;
        DBMS_OUTPUT.PUT_LINE(HEADING);
        DBMS_OUTPUT.PUT_LINE(TRAILING);
        LOOP
            FETCH C_PLOG INTO P_CID, P_PID, P_QUANTITY, P_PER_COST, P_TOTAL_COST, P_TOTAL_COST_W_MEM_DISC, P_PURCHASE_DATE;
            EXIT WHEN C_PLOG%NOTFOUND;
            IF(P_CID = IN_CID) THEN
                SELECT P_NAME INTO PRODUCT_NAME FROM PRODUCT_INFO WHERE ID = P_PID;

                DBMS_OUTPUT.PUT_LINE('PRODUCT ID: ' || P_PID);
                DBMS_OUTPUT.PUT_LINE('PRODUCT NAME: ' || PRODUCT_NAME);
                DBMS_OUTPUT.PUT_LINE('QUANTITY: ' || P_QUANTITY);
                DBMS_OUTPUT.PUT_LINE('PER COST: ' || P_PER_COST);
                DBMS_OUTPUT.PUT_LINE('TOTAL COST: ' || P_TOTAL_COST);
                DBMS_OUTPUT.PUT_LINE('FINAL COST: ' || P_TOTAL_COST_W_MEM_DISC);
                DBMS_OUTPUT.PUT_LINE('PURCHASE DATE: ' || P_PURCHASE_DATE);
                DBMS_OUTPUT.PUT_LINE(TRAILING);
            END IF;
        END LOOP;
    CLOSE C_PLOG;
END;
/

-- SEARCH_BY_PRODUCT PROCEDURE

CREATE OR REPLACE PROCEDURE SEARCH_BY_PRODUCT(IN_PID IN VARCHAR2) AS
    P_CID CUSTOMER_INFO.ID%TYPE;
    P_PID PRODUCT_INFO.ID%TYPE;
    P_QUANTITY NUMBER;
    P_PER_COST NUMBER;
    P_TOTAL_COST NUMBER;
    P_TOTAL_COST_W_MEM_DISC NUMBER;
    P_PURCHASE_DATE DATE;
    CUSTOMER_NAME CUSTOMER_INFO.NAME%TYPE;
    HEADING VARCHAR2(60);
    TRAILING VARCHAR2(60);
    CURSOR C_PLOG IS SELECT CID, PID, QUANTITY, PER_COST, TOTAL_COST, TOTAL_COST_W_MEM_DISC, PURCHASE_DATE FROM PURCHASE_LOG;
BEGIN
    HEADING := 'PURCHASE HISTORY OF PRODUCT WITH ID' || IN_PID;
    TRAILING := LPAD('-', LENGTH(HEADING), '-');
    OPEN C_PLOG;
        DBMS_OUTPUT.PUT_LINE(HEADING);
        DBMS_OUTPUT.PUT_LINE(TRAILING);
        LOOP
            FETCH C_PLOG INTO P_CID, P_PID, P_QUANTITY, P_PER_COST, P_TOTAL_COST, P_TOTAL_COST_W_MEM_DISC, P_PURCHASE_DATE;
            EXIT WHEN C_PLOG%NOTFOUND;
            IF(P_PID = IN_PID) THEN
                SELECT NAME INTO CUSTOMER_NAME FROM CUSTOMER_INFO WHERE ID = P_CID;

                DBMS_OUTPUT.PUT_LINE('CUSTOMER ID: ' || P_CID);
                DBMS_OUTPUT.PUT_LINE('CUSTOMER NAME: ' || CUSTOMER_NAME);
                DBMS_OUTPUT.PUT_LINE('QUANTITY: ' || P_QUANTITY);
                DBMS_OUTPUT.PUT_LINE('PER COST: ' || P_PER_COST);
                DBMS_OUTPUT.PUT_LINE('TOTAL COST: ' || P_TOTAL_COST);
                DBMS_OUTPUT.PUT_LINE('FINAL COST: ' || P_TOTAL_COST_W_MEM_DISC);
                DBMS_OUTPUT.PUT_LINE('PURCHASE DATE: ' || P_PURCHASE_DATE);
                DBMS_OUTPUT.PUT_LINE(TRAILING);
            END IF;
        END LOOP;
    CLOSE C_PLOG;
END;
/

-- TOTAL_PURCHASE_OF_PRODUCT PROCEDURE

CREATE OR REPLACE PROCEDURE TOTAL_PURCHASE_OF_PRODUCT(IN_PID IN VARCHAR2, SOLD_QUANTITY OUT NUMBER, SOLD_PRICE OUT NUMBER) AS
BEGIN
    SELECT SUM(QUANTITY) INTO SOLD_QUANTITY FROM PURCHASE_LOG WHERE PID = IN_PID;
    SELECT SUM(TOTAL_COST_W_MEM_DISC) INTO SOLD_PRICE FROM PURCHASE_LOG WHERE PID = IN_PID;
    
    IF(SOLD_QUANTITY = NULL) THEN
        SOLD_QUANTITY := 0;
    END IF;

    IF(SOLD_PRICE = NULL) THEN
        SOLD_PRICE := 0;
    END IF;
END;
/

-- PURCHASE_IN_LAST_N_DAYS (PID, N) PROCEDURE

CREATE OR REPLACE PROCEDURE PURCHASE_IN_LAST_N_DAYS(IN_PID IN VARCHAR2, N IN NUMBER, SOLD_QUANTITY OUT NUMBER, SOLD_PRICE OUT NUMBER) AS
BEGIN
    SELECT SUM(QUANTITY) INTO SOLD_QUANTITY FROM PURCHASE_LOG WHERE PID = IN_PID AND SYSDATE - PURCHASE_DATE <= N;
    SELECT SUM(TOTAL_COST_W_MEM_DISC) INTO SOLD_PRICE FROM PURCHASE_LOG WHERE PID = IN_PID AND SYSDATE - PURCHASE_DATE <= N;

    IF(SOLD_QUANTITY = NULL) THEN
        SOLD_QUANTITY := 0;
    END IF;

    IF(SOLD_PRICE = NULL) THEN
        SOLD_PRICE := 0;
    END IF;
END;
/


-- TEST

BEGIN
    SEARCH_BY_CUSTOMER('0000002BET');
END;
/

BEGIN
    SEARCH_BY_PRODUCT('SAV_1');
END;
/

DECLARE
    QUANTITY NUMBER;
    PRICE NUMBER;
BEGIN
    TOTAL_PURCHASE_OF_PRODUCT('SAV_1', QUANTITY, PRICE);
    DBMS_OUTPUT.PUT_LINE('SAVLON PURCHASED ' || QUANTITY || ' UNITS, AT TOTAL PRICE OF ' || PRICE || '.');
END;
/

DECLARE
    QUANTITY NUMBER;
    PRICE NUMBER;
    N NUMBER := 1;
BEGIN
    PURCHASE_IN_LAST_N_DAYS('SAV_1', N, QUANTITY, PRICE);
    DBMS_OUTPUT.PUT_LINE('SAVLON PURCHASED ' || QUANTITY || ' UNITS, AT TOTAL PRICE OF ' || PRICE || ' IN LAST ' || N || ' DAYS.');
END;
/
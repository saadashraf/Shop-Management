-- CREATE USER SHOPMAN IDENTIFIED BY PASS123;
-- GRANT CONNECT, CREATE SESSION, RESOURCE, DBA TO SHOPMAN;

-- CONN SHOPMAN/PASS123;

-- RUN THE STATUS.sql FIRST

------------------------------------------------------------------------------ CREATING THE TABLE ----------------------------------------------------------------------

CREATE TABLE CUSTOMER_INFO(
    ID VARCHAR2(10),
    NAME VARCHAR2(20),
    ADDRESS VARCHAR2(30),
    REGISTER_DATE DATE,
    TOTAL_PURCHASE NUMBER,
    STATUS VARCHAR2(8),
    CONSTRAINT PK_CUSTOMER_INFO PRIMARY KEY(ID),
    CONSTRAINT FK_CUSTOMER_INFO__STATUS FOREIGN KEY(STATUS) REFERENCES STATUS(STATUS_NAME)
);

----------------------------------------------------------------------------- CREATING SEQUENCE ------------------------------------------------------------------------

CREATE SEQUENCE SEQ_CUSTOMER_INFO
MINVALUE 0
MAXVALUE 10000
START WITH 1
INCREMENT BY 1
CACHE 20;

------------------------------------------------------------------------------ CREATING PROCEDURES --------------------------------------------------------------------

-- GET ID PROCEDURE
CREATE OR REPLACE PROCEDURE CUSTOMER_GET_ID(IN_NAME IN VARCHAR,OUTPUT OUT VARCHAR2) AS
    SEQ_VAL NUMBER;
BEGIN
    SELECT SEQ_CUSTOMER_INFO.NEXTVAL INTO SEQ_VAL FROM DUAL;
    OUTPUT := LPAD(TO_CHAR(SEQ_VAL), 7, '0') || LPAD(IN_NAME, 3, '-');
END;
/

-- ADD_CUSTOMER PROCEDURE
CREATE OR REPLACE PROCEDURE ADD_CUSTOMER(IN_NAME IN VARCHAR2, IN_ADDRESS IN VARCHAR2) AS
BEGIN
    INSERT INTO CUSTOMER_INFO(NAME, ADDRESS) VALUES (IN_NAME, IN_ADDRESS);
    DBMS_OUTPUT.PUT_LINE(IN_NAME || ' is successfully registered.');
END;
/

-- REMOVE_CUSTOMER PROCEDURE
CREATE OR REPLACE PROCEDURE REMOVE_CUSTOMER(IN_CID IN VARCHAR2) AS
    CNAME VARCHAR2(20);
BEGIN
    SELECT NAME INTO CNAME FROM CUSTOMER_INFO WHERE ID = IN_CID;
    DELETE FROM CUSTOMER_INFO WHERE ID = IN_CID;
    DBMS_OUTPUT.PUT_LINE(CNAME || ' is successfully removed from database');
END;
/

-- REMOVE_CUSTOMER_BY_NAME PROCEDURE -> CRITICAL
CREATE OR REPLACE PROCEDURE REMOVE_CUSTOMER_BY_NAME(IN_NAME IN VARCHAR2) AS
BEGIN
    DELETE FROM CUSTOMER_INFO WHERE NAME = IN_NAME;
    DBMS_OUTPUT.PUT_LINE(IN_NAME || ' is successfully removed from database');
END;
/

-- INCREMENT_TOTAL_PURCHASE PROCEDURE
CREATE OR REPLACE PROCEDURE INCREMENT_TOTAL_PURCHASE(IN_CID IN VARCHAR2, INCREMENT_VALUE IN NUMBER) AS
CURRENT_TOTAL_PURCHASE NUMBER;
NEW_TOTAL_PURCHASE NUMBER;

BEGIN
    SELECT TOTAL_PURCHASE INTO CURRENT_TOTAL_PURCHASE
    FROM CUSTOMER_INFO WHERE ID = IN_CID;

    NEW_TOTAL_PURCHASE := CURRENT_TOTAL_PURCHASE + INCREMENT_VALUE;

    UPDATE CUSTOMER_INFO
    SET TOTAL_PURCHASE = NEW_TOTAL_PURCHASE
    WHERE ID = IN_CID;
END;
/

-- LIST CID, ADDRESS BY NAME
CREATE OR REPLACE PROCEDURE LIST_CID_ADDRESS_BY_NAME(IN_NAME VARCHAR2) AS
    CID CUSTOMER_INFO.ID%TYPE;
    CNAME CUSTOMER_INFO.NAME%TYPE;
    CADDRESS CUSTOMER_INFO.ADDRESS%TYPE;
    CURSOR C_CUSTOMER IS SELECT ID, NAME, ADDRESS FROM CUSTOMER_INFO;
BEGIN
    OPEN C_CUSTOMER;
        LOOP
            FETCH C_CUSTOMER INTO CID, CNAME, CADDRESS;
            EXIT WHEN C_CUSTOMER%NOTFOUND;
            IF(CNAME = IN_NAME) THEN
                DBMS_OUTPUT.PUT_LINE(CID || ' -- ' || CNAME || ' -- ' || CADDRESS);
            END IF;
        END LOOP;
    CLOSE C_CUSTOMER;
END;
/

-- LIST NAME, ADDRESS BY CID
CREATE OR REPLACE PROCEDURE LIST_NAME_ADDRESS_BY_CID(IN_CID VARCHAR2) AS
    CID CUSTOMER_INFO.ID%TYPE;
    CNAME CUSTOMER_INFO.NAME%TYPE;
    CADDRESS CUSTOMER_INFO.ADDRESS%TYPE;
    CURSOR C_CUSTOMER IS SELECT ID, NAME, ADDRESS FROM CUSTOMER_INFO;
BEGIN
    OPEN C_CUSTOMER;
        LOOP
            FETCH C_CUSTOMER INTO CID, CNAME, CADDRESS;
            EXIT WHEN C_CUSTOMER%NOTFOUND;
            IF(CID = IN_CID) THEN
                DBMS_OUTPUT.PUT_LINE(CID || ' -- ' || CNAME || ' -- ' || CADDRESS);
            END IF;
        END LOOP;
    CLOSE C_CUSTOMER;
END;
/

-- GET CUSTOMER INFO PROCEDURE
CREATE OR REPLACE PROCEDURE GET_CUSTOMER_INFO (IN_CID VARCHAR2) AS
    CROW CUSTOMER_INFO%ROWTYPE;
BEGIN
    SELECT *
    INTO CROW
    FROM CUSTOMER_INFO
    WHERE ID = IN_CID;

    DBMS_OUTPUT.PUT_LINE('CUSTOMER INFORMATION');
    DBMS_OUTPUT.PUT_LINE('--------------------');
    DBMS_OUTPUT.PUT_LINE('CID: ' || CROW.ID);
    DBMS_OUTPUT.PUT_LINE('NAME: ' || CROW.NAME);
    DBMS_OUTPUT.PUT_LINE('ADDRESS: ' || CROW.ADDRESS);
    DBMS_OUTPUT.PUT_LINE('STATUS: ' || CROW.STATUS);
    DBMS_OUTPUT.PUT_LINE('REGISTRATION DATE: ' || CROW.REGISTER_DATE);
    DBMS_OUTPUT.PUT_LINE('--------------------');
END;
/

-- GET STATUS PROCEDURE
CREATE OR REPLACE PROCEDURE GET_STATUS(IN_CID IN VARCHAR2, OUTPUT OUT VARCHAR2) AS
BEGIN
    SELECT STATUS INTO OUTPUT FROM CUSTOMER_INFO WHERE ID = IN_CID;
END;
/

-- CHANGE ADDRESS PROCEDURE
CREATE OR REPLACE PROCEDURE CHANGE_ADDRESS(IN_CID IN VARCHAR2, IN_ADDRESS IN VARCHAR2) AS
    CNAME CUSTOMER_INFO.NAME%TYPE;
BEGIN
    UPDATE CUSTOMER_INFO
    SET ADDRESS = IN_ADDRESS
    WHERE ID = IN_CID;
    
    SELECT NAME INTO CNAME FROM CUSTOMER_INFO WHERE ID = IN_CID;

    DBMS_OUTPUT.PUT_LINE('Address of ' || CNAME || ' successfully changed to ' || IN_ADDRESS || '.');
END;
/

-- LIST ALL CUSTOMER PROCEDURE
CREATE OR REPLACE PROCEDURE LIST_ALL_CUSTOMERS AS
    CID CUSTOMER_INFO.ID%TYPE;
    CNAME CUSTOMER_INFO.NAME%TYPE;
    CADDRESS CUSTOMER_INFO.ADDRESS%TYPE;
    CSTATUS CUSTOMER_INFO.STATUS%TYPE;
    CREGDATE CUSTOMER_INFO.REGISTER_DATE%TYPE;
    CURSOR C_CUSTOMER IS SELECT ID, NAME, ADDRESS, STATUS, REGISTER_DATE FROM CUSTOMER_INFO;
BEGIN
    OPEN C_CUSTOMER;
        DBMS_OUTPUT.PUT_LINE('CUSTOMER INFORMATION');
        DBMS_OUTPUT.PUT_LINE('--------------------');
        LOOP
            FETCH C_CUSTOMER INTO CID, CNAME, CADDRESS, CSTATUS, CREGDATE;
            EXIT WHEN C_CUSTOMER%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('CID: ' || CID);
            DBMS_OUTPUT.PUT_LINE('NAME: ' || CNAME);
            DBMS_OUTPUT.PUT_LINE('ADDRESS: ' || CADDRESS);
            DBMS_OUTPUT.PUT_LINE('STATUS: ' || CSTATUS);
            DBMS_OUTPUT.PUT_LINE('REGISTRATION DATE: ' || CREGDATE);
            DBMS_OUTPUT.PUT_LINE('--------------------');
        END LOOP;
    CLOSE C_CUSTOMER;
END;
/

-- SEARCH BY NAME PROCEDURE
CREATE OR REPLACE PROCEDURE SEARCH_BY_NAME(IN_NAME IN VARCHAR2) AS
    CID CUSTOMER_INFO.ID%TYPE;
    CNAME CUSTOMER_INFO.NAME%TYPE;
    CADDRESS CUSTOMER_INFO.ADDRESS%TYPE;
    CSTATUS CUSTOMER_INFO.STATUS%TYPE;
    CREGDATE CUSTOMER_INFO.REGISTER_DATE%TYPE;
    HEADING VARCHAR2(50);
    TRAILING VARCHAR2(50);
    CURSOR C_CUSTOMER IS SELECT ID, NAME, ADDRESS, STATUS, REGISTER_DATE FROM CUSTOMER_INFO;
BEGIN
    HEADING := 'CUSTOMERS CONTAINING ' || IN_NAME || ' IN NAME';
    TRAILING := LPAD('-', LENGTH(HEADING), '-');
    OPEN C_CUSTOMER;
        DBMS_OUTPUT.PUT_LINE(HEADING);
        DBMS_OUTPUT.PUT_LINE(TRAILING);
        LOOP
            FETCH C_CUSTOMER INTO CID, CNAME, CADDRESS, CSTATUS, CREGDATE;
            EXIT WHEN C_CUSTOMER%NOTFOUND;
            IF(INSTR(CNAME,IN_NAME) > 0) THEN
                DBMS_OUTPUT.PUT_LINE('CID: ' || CID);
                DBMS_OUTPUT.PUT_LINE('NAME: ' || CNAME);
                DBMS_OUTPUT.PUT_LINE('ADDRESS: ' || CADDRESS);
                DBMS_OUTPUT.PUT_LINE('STATUS: ' || CSTATUS);
                DBMS_OUTPUT.PUT_LINE('REGISTRATION DATE: ' || CREGDATE);
                DBMS_OUTPUT.PUT_LINE(TRAILING);
            END IF;
        END LOOP;
    CLOSE C_CUSTOMER;
END;
/

-- SEARCH BY ADDRESS PROCEDURE
CREATE OR REPLACE PROCEDURE SEARCH_BY_ADDRESS(IN_ADDRESS IN VARCHAR2) AS
    CID CUSTOMER_INFO.ID%TYPE;
    CNAME CUSTOMER_INFO.NAME%TYPE;
    CADDRESS CUSTOMER_INFO.ADDRESS%TYPE;
    CSTATUS CUSTOMER_INFO.STATUS%TYPE;
    CREGDATE CUSTOMER_INFO.REGISTER_DATE%TYPE;
    HEADING VARCHAR2(54);
    TRAILING VARCHAR2(54);
    CURSOR C_CUSTOMER IS SELECT ID, NAME, ADDRESS, STATUS, REGISTER_DATE FROM CUSTOMER_INFO;
BEGIN
    HEADING := 'CUSTOMERS CONTAINING ' || IN_ADDRESS || ' IN ADDRESS';
    TRAILING := LPAD('-', LENGTH(HEADING), '-');
    OPEN C_CUSTOMER;
        DBMS_OUTPUT.PUT_LINE(HEADING);
        DBMS_OUTPUT.PUT_LINE(TRAILING);
        LOOP
            FETCH C_CUSTOMER INTO CID, CNAME, CADDRESS, CSTATUS, CREGDATE;
            EXIT WHEN C_CUSTOMER%NOTFOUND;
            IF(INSTR(CADDRESS,IN_ADDRESS) > 0) THEN
                DBMS_OUTPUT.PUT_LINE('CID: ' || CID);
                DBMS_OUTPUT.PUT_LINE('NAME: ' || CNAME);
                DBMS_OUTPUT.PUT_LINE('ADDRESS: ' || CADDRESS);
                DBMS_OUTPUT.PUT_LINE('STATUS: ' || CSTATUS);
                DBMS_OUTPUT.PUT_LINE('REGISTRATION DATE: ' || CREGDATE);
                DBMS_OUTPUT.PUT_LINE(TRAILING);
            END IF;
        END LOOP;
    CLOSE C_CUSTOMER;
END;
/

-- SEARCH BY STATUS PROCEDURE
CREATE OR REPLACE PROCEDURE SEARCH_BY_STATUS(IN_STATUS IN VARCHAR2) AS
    CID CUSTOMER_INFO.ID%TYPE;
    CNAME CUSTOMER_INFO.NAME%TYPE;
    CADDRESS CUSTOMER_INFO.ADDRESS%TYPE;
    CSTATUS CUSTOMER_INFO.STATUS%TYPE;
    CREGDATE CUSTOMER_INFO.REGISTER_DATE%TYPE;
    HEADING VARCHAR2(45);
    TRAILING VARCHAR2(45);
    CURSOR C_CUSTOMER IS SELECT ID, NAME, ADDRESS, STATUS, REGISTER_DATE FROM CUSTOMER_INFO;
BEGIN
    HEADING := 'CUSTOMERS WITH ' || IN_STATUS || ' STATUS';
    TRAILING := LPAD('-', LENGTH(HEADING), '-');
    OPEN C_CUSTOMER;
        DBMS_OUTPUT.PUT_LINE(HEADING);
        DBMS_OUTPUT.PUT_LINE(TRAILING);
        LOOP
            FETCH C_CUSTOMER INTO CID, CNAME, CADDRESS, CSTATUS, CREGDATE;
            EXIT WHEN C_CUSTOMER%NOTFOUND;
            IF(CSTATUS = IN_STATUS) THEN
                DBMS_OUTPUT.PUT_LINE('CID: ' || CID);
                DBMS_OUTPUT.PUT_LINE('NAME: ' || CNAME);
                DBMS_OUTPUT.PUT_LINE('ADDRESS: ' || CADDRESS);
                DBMS_OUTPUT.PUT_LINE('STATUS: ' || CSTATUS);
                DBMS_OUTPUT.PUT_LINE('REGISTRATION DATE: ' || CREGDATE);
                DBMS_OUTPUT.PUT_LINE(TRAILING);
            END IF;
        END LOOP;
    CLOSE C_CUSTOMER;
END;
/



------------------------------------------------------------------------ CREATING THE TRIGGERS -------------------------------------------------------------------------

-- INSERT TRIGGER
CREATE OR REPLACE TRIGGER TRIG_INS_CUSTOMER_INFO
BEFORE INSERT ON CUSTOMER_INFO
FOR EACH ROW
BEGIN
  :NEW.STATUS := 'NEW';
  :NEW.REGISTER_DATE := SYSDATE;
  :NEW.TOTAL_PURCHASE := 0;
  CUSTOMER_GET_ID(:NEW.NAME, :NEW.ID);
END;
/

ALTER TRIGGER TRIG_INS_CUSTOMER_INFO ENABLE;

-- UPDATE TRIGGER
CREATE OR REPLACE TRIGGER TRIG_UPDT_CUSTOMER_INFO
BEFORE UPDATE ON CUSTOMER_INFO
FOR EACH ROW
BEGIN
  IF (:NEW.TOTAL_PURCHASE > 5000 AND SYSDATE - :NEW.REGISTER_DATE > 300) THEN
    :NEW.STATUS := 'PLATINUM';
  ELSIF (:NEW.TOTAL_PURCHASE > 2000 AND SYSDATE - :NEW.REGISTER_DATE > 150) THEN
    :NEW.STATUS := 'GOLD';
  ELSIF (:NEW.TOTAL_PURCHASE > 500) THEN
    :NEW.STATUS := 'SILVER';
  ELSIF (:NEW.TOTAL_PURCHASE > 100) THEN
    :NEW.STATUS := 'BRONZE';
  END IF;
END;
/

ALTER TRIGGER TRIG_UPDT_CUSTOMER_INFO ENABLE;


-------------------------------------------------------------------------- END OF CODE -------------------------------------------------------------------------------



-- TEST VALUES

-- INSERT INTO CUSTOMER_INFO (NAME, ADDRESS) VALUES ('BETA', 'NY');

-- UPDATE CUSTOMER_INFO SET TOTAL_PURCHASE = 5001 WHERE ID = 'ID';

-- UPDATE CUSTOMER_INFO SET REGISTER_DATE = TO_DATE('10-01-2019', 'DD-MM-YYYY') WHERE ID = 'ID';

-- DELETE CUSTOMER_INFO;

BEGIN
    ADD_CUSTOMER('ISHRAK', 'MIRPUR');
END;
/

BEGIN
    REMOVE_CUSTOMER('0000003ISH');
END;
/

BEGIN
    REMOVE_CUSTOMER_BY_NAME('ISHRAK');
END;
/

BEGIN
    LIST_CID_ADDRESS_BY_NAME('ALPHA');
END;
/

BEGIN
    LIST_NAME_ADDRESS_BY_CID('0000001ALP');
END;
/

BEGIN
    GET_CUSTOMER_INFO('0000001ALP');
END;
/

DECLARE
    CSTATUS CUSTOMER_INFO.STATUS%TYPE;
BEGIN
    GET_STATUS('0000001ALP', CSTATUS);
    DBMS_OUTPUT.PUT_LINE('STATUS: ' || CSTATUS);
END;
/

BEGIN
    CHANGE_ADDRESS('0000002BET', 'WASHINGTON DC, USA');
END;
/

BEGIN
    LIST_ALL_CUSTOMERS();
END;
/

BEGIN
    SEARCH_BY_NAME('A');
END;
/

BEGIN
    SEARCH_BY_ADDRESS('WASH');
END;
/

BEGIN
    SEARCH_BY_STATUS('NEW');
END;
/

BEGIN
    INCREMENT_TOTAL_PURCHASE('0000001ALP', 1000);
END;
/

SELECT * FROM CUSTOMER_INFO;

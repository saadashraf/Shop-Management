SET SERVEROUTPUT ON SIZE 1000000 ;

CREATE SEQUENCE PRODUCT_ID
MINVALUE 1
MAXVALUE 999999
START WITH 1
INCREMENT BY 1
CACHE 20;

CREATE TABLE PRODUCT_INFO(
    ID VARCHAR2 (10),
    P_NAME VARCHAR2 (10),
    PRODUCER VARCHAR2 (15),
    MRP NUMBER,
    CURRENT_DISCOUNT NUMBER DEFAULT 0,
    DISCOUNT_UNTIL DATE DEFAULT NULL,
    CONSTRAINT PK_PRODUCT_INFO PRIMARY KEY(ID)
);

-- GENERATE_ID(generates unique id)

CREATE OR REPLACE PROCEDURE GENERATE_ID(TOKEN IN NUMBER ,PRODUCT_NAME IN VARCHAR2, GENID OUT VARCHAR2)
AS
    NAME_LENGTH NUMBER;
BEGIN
    NAME_LENGTH := LENGTH (PRODUCT_NAME);
    IF NAME_LENGTH < 3 THEN 
        GENID := (PRODUCT_NAME || '_' || TO_CHAR(TOKEN));
    ELSE
        GENID := (SUBSTR(PRODUCT_NAME , 1 , 3) || '_' || TO_CHAR(TOKEN));
    END IF;
END;
/



CREATE OR REPLACE PROCEDURE ADD_PRODUCT(NAME IN VARCHAR2 , PRODUCER IN VARCHAR2 , MRP IN NUMBER)
AS
    ROW_EXIST NUMBER;
    PRODUCTID VARCHAR2(20);
BEGIN

    SELECT COUNT(*) INTO ROW_EXIST  FROM PRODUCT_INFO WHERE P_NAME = NAME AND PRODUCER = PRODUCER;
    IF ROW_EXIST = 0 THEN
        GENERATE_ID(PRODUCT_ID.NEXTVAL , NAME , PRODUCTID);
        INSERT INTO PRODUCT_INFO (ID , P_NAME , PRODUCER , MRP ) VALUES ( PRODUCTID , NAME , PRODUCER , MRP);
        --INSERT INTO STOCK (PID) VALUES (PRODUCTID);
    ELSE
        DBMS_OUTPUT.PUT_LINE ('RECORD OF ' || NAME || 'BY ' || PRODUCER || ' ALREADY EXISTS' );
    END IF;
END;
/



CREATE OR REPLACE TRIGGER ADD_ID
AFTER INSERT ON PRODUCT_INFO 
FOR EACH ROW
ENABLE
BEGIN
    INSERT INTO STOCK (PID) VALUES (:NEW.ID);
END;
/



CREATE OR REPLACE PROCEDURE REMOVE_PRODUCT_ID(PID_V IN VARCHAR2)
AS
    ROW_EXISTS NUMBER;
BEGIN
    SELECT COUNT(*) INTO ROW_EXISTS  FROM PRODUCT_INFO WHERE ID = PID_V;
    IF ROW_EXISTS = 0 THEN
        DBMS_OUTPUT.PUT_LINE ('PRODUCT DOES NOT EXIST' );
    ELSE
        DELETE FROM PRODUCT_INFO WHERE ID = PID_V;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER T_REMOVE_PRODUCT_ID
BEFORE DELETE ON PRODUCT_INFO
FOR EACH ROW
ENABLE
BEGIN
    DELETE FROM STOCK WHERE PID = :OLD.ID;
END;
/

CREATE OR REPLACE PROCEDURE RMV_PRODUCT_BY_NAME_PRODUCER(NAME IN VARCHAR2 , PRODUCER_V IN VARCHAR2)
AS
    ROW_EXISTS NUMBER;
BEGIN
    SELECT COUNT(*) INTO ROW_EXISTS  FROM PRODUCT_INFO WHERE P_NAME = NAME AND PRODUCER = PRODUCER_V;
    IF ROW_EXISTS = 0 THEN
        DBMS_OUTPUT.PUT_LINE ('PRODUCT DOES NOT EXIST' );
    ELSE
        DELETE FROM PRODUCT_INFO WHERE P_NAME = NAME AND PRODUCER = PRODUCER_V;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER T_RMV_PRODUCT_BY_NAME_PRODUCER
BEFORE DELETE ON PRODUCT_INFO
FOR EACH ROW
ENABLE
BEGIN
    DELETE FROM STOCK WHERE PID = :OLD.ID;
END;
/


CREATE OR REPLACE PROCEDURE REMOVE_ALL_PRODUCT_BY_PRODUCER(PRODUCER_V IN VARCHAR2)
AS
    ROW_EXISTS NUMBER;
BEGIN
    SELECT COUNT(*) INTO ROW_EXISTS FROM PRODUCT_INFO WHERE PRODUCER = PRODUCER_V;
    IF ROW_EXISTS = 0 THEN 
        DBMS_OUTPUT.PUT_LINE ('PRODUCER DOES NOT EXIST' );
    ELSE

        DELETE FROM PRODUCT_INFO WHERE PRODUCER = PRODUCER_V;
    END IF;

END;
/

CREATE OR REPLACE TRIGGER T_REMOVE_PRODUCT_BY_PRODUCER
BEFORE DELETE ON PRODUCT_INFO
FOR EACH ROW
ENABLE
BEGIN
    DELETE FROM STOCK WHERE PID = :OLD.ID;
END;
/

CREATE OR REPLACE PROCEDURE GET_PID(NAME IN VARCHAR2 , PRODUCER_V IN VARCHAR2 , RET OUT VARCHAR2)
AS
    ROW_EXISTS NUMBER;
BEGIN
    SELECT COUNT(*) INTO ROW_EXISTS FROM PRODUCT_INFO WHERE P_NAME = NAME AND PRODUCER = PRODUCER_V;
    IF ROW_EXISTS = 0 THEN 
        DBMS_OUTPUT.PUT_LINE ('PRODUCER DOES NOT EXIST' );
    ELSE
        SELECT ID INTO RET FROM PRODUCT_INFO WHERE P_NAME = NAME AND PRODUCER = PRODUCER_V;
    END IF;
END;
/


CREATE  OR REPLACE PROCEDURE SET_DISCOUNT(PID IN VARCHAR2 , DISCOUNT_VALUE IN NUMBER , VALIDITY VARCHAR2)
AS
BEGIN

    UPDATE PRODUCT_INFO SET 
    CURRENT_DISCOUNT = DISCOUNT_VALUE,
    DISCOUNT_UNTIL = TO_DATE(VALIDITY,'DD/MM/YYYY')
    WHERE ID = PID;
    IF SQL%NOTFOUND THEN
        DBMS_OUTPUT.PUT_LINE ('NO PRODUCT OF ID ' || PID || ' EXISTS' );
    END IF;
END;
/



CREATE OR REPLACE PROCEDURE CHECK_DISCOUNT(PID IN VARCHAR2)
AS
DAY INT;
PRODUCT_DATE DATE;
PRODUCT_NAME VARCHAR2(15);
ROW_EXISTS NUMBER;

BEGIN

    SELECT COUNT(*) INTO ROW_EXISTS FROM PRODUCT_INFO WHERE ID = PID;
    IF ROW_EXISTS = 0 THEN 
        DBMS_OUTPUT.PUT_LINE ('NO PRODUCT OF ID ' || PID || ' EXISTS' );
        
    ELSE
        SELECT DISCOUNT_UNTIL,P_NAME INTO PRODUCT_DATE,PRODUCT_NAME FROM PRODUCT_INFO WHERE ID = PID;
        DAY := PRODUCT_DATE - SYSDATE;
        DBMS_OUTPUT.PUT_LINE (DAY);
        IF DAY > 0 THEN
            DBMS_OUTPUT.PUT_LINE ('DISCOUNT FOR PRODUCT ' || PRODUCT_NAME || ' IS VALID FOR NEXT '|| DAY ||' DAYS'  );
        ELSE
            DBMS_OUTPUT.PUT_LINE ('DISCOUNT FOR PRODUCT ' || PRODUCT_NAME ||' IS EXPIRED');
        END IF;
    END IF;    
END;
/


CREATE OR REPLACE PROCEDURE GIVE_DISCOUNT_BY_PRODUCER(PRODUCER_V IN VARCHAR2 , DISCOUNT_VALUE IN NUMBER , VALIDITY IN  VARCHAR2)
AS

    CURSOR GET_ALL_BY_PRODUCER IS
    SELECT ID FROM PRODUCT_INFO
    WHERE PRODUCER = PRODUCER_V;

    P_REC VARCHAR2(15);

    ROW_EXISTS NUMBER;
BEGIN
    SELECT COUNT(*) INTO ROW_EXISTS FROM PRODUCT_INFO WHERE PRODUCER = PRODUCER_V;
    IF ROW_EXISTS = 0 THEN
        DBMS_OUTPUT.PUT_LINE ('PRODUCT DOES NOT EXIXTS');
    ELSE

        FOR  P_REC IN GET_ALL_BY_PRODUCER
        LOOP
            UPDATE PRODUCT_INFO SET
            CURRENT_DISCOUNT = DISCOUNT_VALUE,
            DISCOUNT_UNTIL = TO_DATE(VALIDITY , 'DD/MM/YYYY')
            WHERE ID = P_REC.ID;
        END LOOP;
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE GIVE_CONDITIONAL_DISCOUNT(MARGIN IN NUMBER,
BELOW IN NUMBER , ABOVE IN NUMBER , EQUAL IN NUMBER , VALIDITY IN VARCHAR2)
AS
    CURSOR GET_ALL IS
    SELECT * FROM PRODUCT_INFO;

    P_REC VARCHAR2(15);
    ROW_EXIST NUMBER ;
BEGIN

    SELECT COUNT(*) INTO ROW_EXIST FROM PRODUCT_INFO;

    IF ROW_EXIST = 0 THEN
        DBMS_OUTPUT.PUT_LINE ('NO PRODUCTS AVAILABLE TO GIVE DISCOUNT');
    ELSE
        FOR P_REC IN GET_ALL
        LOOP
            IF P_REC.CURRENT_DISCOUNT IS NULL THEN
                UPDATE PRODUCT_INFO SET
                CURRENT_DISCOUNT = BELOW,
                DISCOUNT_UNTIL = TO_DATE(VALIDITY , 'DD/MM/YYYY')
                WHERE ID = P_REC.ID;
            
            ELSIF P_REC.CURRENT_DISCOUNT < MARGIN THEN

                UPDATE PRODUCT_INFO SET
                CURRENT_DISCOUNT = BELOW,
                DISCOUNT_UNTIL = TO_DATE(VALIDITY , 'DD/MM/YYYY')
                WHERE ID = P_REC.ID;
            ELSIF P_REC.CURRENT_DISCOUNT = MARGIN THEN
                UPDATE PRODUCT_INFO SET
                CURRENT_DISCOUNT = EQUAL,
                DISCOUNT_UNTIL = TO_DATE(VALIDITY , 'DD/MM/YYYY')
                WHERE ID = P_REC.ID;
            
            ELSE
                UPDATE PRODUCT_INFO SET
                CURRENT_DISCOUNT = ABOVE,
                DISCOUNT_UNTIL = TO_DATE(VALIDITY , 'DD/MM/YYYY')
                WHERE ID = P_REC.ID;

            END IF;
        END LOOP;
    END IF;
END;
/


CREATE OR REPLACE PROCEDURE GIVE_CONDITIONAL_DISCOUNT(MARGIN IN NUMBER,
BELOW IN NUMBER , ABOVE IN NUMBER , EQUAL IN NUMBER , VALIDITY IN VARCHAR2)
AS
    CURSOR GET_ALL IS
    SELECT * FROM PRODUCT_INFO;

    P_REC VARCHAR2(15);
    ROW_EXIST NUMBER ;
BEGIN

    SELECT COUNT(*) INTO ROW_EXIST FROM PRODUCT_INFO;

    IF ROW_EXIST = 0 THEN
        DBMS_OUTPUT.PUT_LINE ('NO PRODUCTS AVAILABLE TO GIVE DISCOUNT');
    ELSE
        FOR P_REC IN GET_ALL
        LOOP
            IF P_REC.CURRENT_DISCOUNT < MARGIN THEN
            
                SET_DISCOUNT(P_REC.ID , BELOW , VALIDITY);
                
                
            ELSIF P_REC.CURRENT_DISCOUNT = MARGIN THEN
                SET_DISCOUNT(P_REC.ID , EQUAL , VALIDITY);
            
            ELSE
                SET_DISCOUNT(P_REC.ID , ABOVE , VALIDITY);
            END IF;
        END LOOP;
    END IF;
END;
/


CREATE OR REPLACE PROCEDURE CONDITIONAL_DISCOUNT_PRODUCER(PRODUCER_V IN VARCHAR2,
MARGIN IN NUMBER,BELOW IN NUMBER , ABOVE IN NUMBER , EQUAL IN NUMBER ,
 VALIDITY IN VARCHAR2)
AS
    CURSOR GET_ALL IS
    SELECT * FROM PRODUCT_INFO WHERE PRODUCER = PRODUCER_V;

    P_REC VARCHAR2(15);
    ROW_EXIST NUMBER ;
BEGIN

    SELECT COUNT(*) INTO ROW_EXIST FROM PRODUCT_INFO;

    IF ROW_EXIST = 0 THEN
        DBMS_OUTPUT.PUT_LINE ('NO PRODUCTS AVAILABLE TO GIVE DISCOUNT');
    ELSE
        FOR P_REC IN GET_ALL
        LOOP
            IF P_REC.CURRENT_DISCOUNT < MARGIN THEN
                SET_DISCOUNT(P_REC.ID , BELOW , VALIDITY);

            ELSIF P_REC.CURRENT_DISCOUNT = MARGIN THEN
                SET_DISCOUNT(P_REC.ID , EQUAL , VALIDITY);
            
            ELSE
                SET_DISCOUNT(P_REC.ID , ABOVE , VALIDITY);
            END IF;
        END LOOP;
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE GET_PRODUCT_COST(IN_PID VARCHAR2, IN_TRUE_COST OUT NUMBER, IN_DISCOUNTED_COST OUT NUMBER, IN_DISCOUNT OUT NUMBER) AS

P_DISCOUNT_VALIDITY DATE;
TRUE_COST NUMBER;
DISCOUNT NUMBER;

BEGIN
    SELECT MRP, CURRENT_DISCOUNT, DISCOUNT_UNTIL
    INTO TRUE_COST, DISCOUNT, P_DISCOUNT_VALIDITY
    FROM PRODUCT_INFO WHERE ID = IN_PID;

    IF(TO_DATE(P_DISCOUNT_VALIDITY) - SYSDATE >= 0) THEN
        IN_DISCOUNTED_COST := TRUE_COST - (TRUE_COST * DISCOUNT)/100;
        IN_TRUE_COST := TRUE_COST;
        IN_DISCOUNT := DISCOUNT;
    ELSE
        IN_DISCOUNTED_COST := TRUE_COST;
        IN_TRUE_COST := TRUE_COST;
        IN_DISCOUNT := 0;
    END IF;
END;
/

-- TESTS

BEGIN
    ADD_PRODUCT('SAVLON' , 'ACI' , 100);
    ADD_PRODUCT('DETTOL' , 'R_AND_B' , 120);
    ADD_PRODUCT('LIFEBOUY' , 'UNILEVER' , 90);
END;
/

BEGIN
    SET_DISCOUNT('SAV_1' , 10 , TO_DATE('10-10-2019','DD-MM-YY'));
    SET_DISCOUNT('DET_2' , 5 , TO_DATE('02-01-2019','DD-MM-YY'));
    SET_DISCOUNT('LIF_3' , 20 , TO_DATE('10-10-2019','DD-MM-YY'));
END;
/

DECLARE
    TRUE_COST NUMBER;
    DISCOUNTED_COST NUMBER;
    DISCOUNT NUMBER;
BEGIN
    GET_PRODUCT_COST('SAV_1', TRUE_COST, DISCOUNTED_COST, DISCOUNT);
    DBMS_OUTPUT.PUT_LINE('SAVLON: TC-> ' || TRUE_COST || ' DC-> ' || DISCOUNTED_COST || ' D-> ' || DISCOUNT);
    GET_PRODUCT_COST('DET_2', TRUE_COST, DISCOUNTED_COST, DISCOUNT);
    DBMS_OUTPUT.PUT_LINE('DETTOL: TC-> ' || TRUE_COST || ' DC-> ' || DISCOUNTED_COST || ' D-> ' || DISCOUNT);
    GET_PRODUCT_COST('LIF_3', TRUE_COST, DISCOUNTED_COST, DISCOUNT);
    DBMS_OUTPUT.PUT_LINE('LIFEBOUY: TC-> ' || TRUE_COST || ' DC-> ' || DISCOUNTED_COST || ' D-> ' || DISCOUNT);
END;
/

BEGIN
    SET_MIN_MARGIN('SAV_1', 30);
    RESTOCK('SAV_1', 100);
END;
/


SELECT * FROM PRODUCT_INFO;
SELECT * FROM STOCK;
SELECT * FROM CUSTOMER_INFO;

BEGIN
    MAKE_PURCHASE('0000002BET', 'SAV_1', 33);
END;
/